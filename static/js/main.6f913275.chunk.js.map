{"version":3,"sources":["components/Form.jsx","components/Song.jsx","components/InfoC.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","consultAPIW","useState","Artist","Song","Search","setSearch","updateSearch","e","target","name","value","className","onSubmit","preventDefault","trim","alert","type","placeholder","required","onChange","Word","length","InfoC","Info","Object","keys","src","strArtistThumb","alt","strGenre","strBiographyES","href","strFacebook","rel","strTwitter","strLastFMChart","App","setArtist","setWord","setInfo","a","axios","res","data","lyrics","consultInfoAPI","url","artists","useEffect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f913275.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Form = ({ consultAPIW }) => {\n  const [Search, setSearch] = useState({\n    Artist: \"\",\n    Song: \"\",\n  });\n\n  const updateSearch = (e) => {\n    setSearch({\n      ...Search,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const sendSearch = (e) => {\n    e.preventDefault();\n    if (Search.Artist.trim() === \"\" || Search.Song.trim() === \"\") {\n      alert(\"Ambos campos son Obligatorios\");\n      return;\n    }\n    consultAPIW(Search);\n  };\n\n  return (\n    <div className=\"bg-info\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <form\n            className=\"col card text-white bg-transparent  mb-5 pt-5 pb-2\"\n            onSubmit={sendSearch}\n          >\n            <fieldset>\n              <legend className=\"text-center\">Buscador Letras Canciones</legend>\n              <div className=\"row\">\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label>Artista</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"Artist\"\n                      placeholder=\"Nombre Artista\"\n                      required\n                      onChange={updateSearch}\n                    />\n                  </div>\n                </div>\n                <div className=\"col-md-6\">\n                  <div className=\"form-group\">\n                    <label>Canción</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"Song\"\n                      placeholder=\"Nombre Canción\"\n                      required\n                      onChange={updateSearch}\n                    />\n                  </div>\n                </div>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary float-right\">\n                Buscar\n              </button>\n            </fieldset>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from 'react'\n\nconst Song = ({Word}) => {\n  if(Word.length === 0) return null;\n  return (\n    <>\n      <h2>Letra de la Cancion</h2>\n      <p className=\"letra\">{Word}</p>\n    </>\n  )\n}\n\nexport default Song\n","import React from 'react'\n\nconst InfoC = ({Info}) => {\n  //console.log(Info);\n  if(Object.keys(Info).length === 0) return null;\n\n  return (\n    <div className=\"card border-light\">\n      <div className=\"card-header bg-primary text-light font-weight-bold\">\n        Informacion del Artista\n      </div>\n      <div className=\"card-body\">\n        <img src={Info.strArtistThumb} alt=\"tumb\"/>\n        <p className=\"card-text\">Genero: {Info.strGenre}</p>\n        <h2 className=\"card-text text-center\">Biografia</h2>\n        <p className=\"card-text\">{Info.strBiographyES}</p>\n        <p className=\"card-text\">\n          <a href={`http://${Info.strFacebook}`} target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-facebook\"></i>\n          </a>\n          <a href={`http://${Info.strTwitter}`} target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-twitter\"></i>\n          </a>\n          <a href={Info.strLastFMChart} target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-lastfm\"></i>\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoC\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"./components/Form.jsx\";\nimport Song from \"./components/Song.jsx\";\nimport InfoC from \"./components/InfoC.jsx\";\n\nimport axios from \"axios\";\n\nconst App = () => {\n  const [Artist, setArtist] = useState(\"\");\n  const [Word, setWord] = useState([]);\n  const [Info, setInfo] = useState({});\n\n//Check the API to Get The song lyrics\n  const consultAPIW = async (Search) => {\n    const { Artist, Song } = Search;\n    const res = await axios(`https://api.lyrics.ovh/v1/${Artist}/${Song}`);\n    //console.log(res)\n    setWord(res.data.lyrics);\n    setArtist(Artist);\n  };\n\n  const consultInfoAPI = async () => {\n    if(Artist){\n      let url = `https://theaudiodb.com/api/v1/json/1/search.php?s=${Artist}`;\n      const res = await axios(url);\n\n      setInfo(res.data.artists[0]);\n      //console.log(Info);\n    }\n  };\n\n  useEffect(() => {\n    //console.log(\"object\", Artist)\n    consultInfoAPI();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Artist]);\n\n  return (\n    <>\n      <Form consultAPIW={consultAPIW} />\n      <div className=\"container mt-5 \">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <InfoC Info={Info} />\n          </div>\n          <div className=\"col-md-6\">\n            <Song Word={Word} />\n          </div>\n        </div>\n      </div>\n      <footer>Create By: David Israel Moreno Resendez</footer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}